{
    "address": "0x13FA1D279699BFDC66bE56A1E1c22BF09e8bc94E",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x1b48e9d2b80f8ccd5ddd10cc460df25b470e2c99f31e10b6acbd3be640c5a4d8",
    "receipt": {
        "to": null,
        "from": "0x4bF48A5Da9F8268f1f72A92975433B65f6e0e938",
        "contractAddress": "0x13FA1D279699BFDC66bE56A1E1c22BF09e8bc94E",
        "transactionIndex": 4,
        "gasUsed": "1038682",
        "logsBloom": "0x
        "blockHash": "0x618ac42217d96a009ae68b375b37fa973e9cba2cc81812e26ae4e566437b127e",
        "transactionHash": "0x1b48e9d2b80f8ccd5ddd10cc460df25b470e2c99f31e10b6acbd3be640c5a4d8",
        "logs": [],
        "blockNumber": 11078921,
        "cumulativeGasUsed": "2255401",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x78F9e60608bF48a1155b4B2A5e31F32318a1d85F"],
    "numDeployments": 2,
    "solcInputHash": "44fd32874fc418d52c7cdf9738ed9740",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Richard Jeremy Githuba\",\"details\":\"This implements the price feeds as our library \",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements the price feeds as our library \"}},\"title\":\"A contract for crowdfunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract demos a crowd funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner(); //naming convection to notify from where the error is coming from\\n//NavSpec format of commenting\\n\\n/**\\n*   @title A contract for crowdfunding\\n*   @author Richard Jeremy Githuba\\n*   @notice This contract demos a crowd funding contract\\n*   @dev This implements the price feeds as our library \\n */\\n\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable  i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n     \\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    \\n    constructor(address priceFeedAddress) { //called immediately we deploy our contract \\n\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress); \\n    }\\n\\n        // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n     receive() external payable {\\n        fund();\\n    }\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n   /**\\n\\n*   @notice This function funds this contract\\n*   @dev This implements the price feeds as our library \\n */\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    // function getVersion() public view returns (uint256){\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\n    //     return priceFeed.version();\\n    // }\\n   \\n    function withdraw() payable onlyOwner public {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    function cheaperWithdraw() payable onlyOwner public {\\n        address[] memory funders = s_funders;\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n    \\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n\\n    }\\n\\n    function getAddressToAmountFunded (address funder) public view returns (uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n    function getPriceFeed() public view returns (AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n\\n\\n}\\n\\n\\n\\n\",\"keccak256\":\"0xeafec7f72984e07f786a499878a3f90f2f82f6bbe37ed582438d8ca6a08a9078\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        // );\\n\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xc1a0a36de9804792ef5cf8174ee2d500045452967aa668acd2b7e568a28ea695\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012eb380380620012eb833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61116c6200017f600039600081816103350152818161058401526105d4015261116c6000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aa4565b6102eb565b6040516100cc9190610aea565b60405180910390f35b6100dd610333565b005b3480156100eb57600080fd5b506100f4610573565b6040516101019190610aea565b60405180910390f35b34801561011657600080fd5b5061011f610580565b60405161012c9190610b14565b60405180910390f35b34801561014157600080fd5b5061014a6105a8565b6040516101579190610b8e565b60405180910390f35b6101686101b1565b005b6101726105d2565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bd5565b610876565b6040516101a89190610b14565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108be90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c5f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027f9190610cae565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610463576000600182815481106103de576103dd610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045b90610d33565b9150506103bb565b50600067ffffffffffffffff81111561047f5761047e610d7c565b5b6040519080825280602002602001820160405280156104ad5781602001602082028036833780820191505090505b50600190805190602001906104c392919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ea90610ddc565b60006040518083038185875af1925050503d8060008114610527576040519150601f19603f3d011682016040523d82523d6000602084013e61052c565b606091505b5050905080610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790610e3d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610657576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106db57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610691575b5050505050905060005b815181101561076557600082828151811061070357610702610d04565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075d90610d33565b9150506106e5565b50600067ffffffffffffffff81111561078157610780610d7c565b5b6040519080825280602002602001820160405280156107af5781602001602082028036833780820191505090505b50600190805190602001906107c592919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ec90610ddc565b60006040518083038185875af1925050503d8060008114610829576040519150601f19603f3d011682016040523d82523d6000602084013e61082e565b606091505b5050905080610872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086990610e3d565b60405180910390fd5b5050565b60006001828154811061088c5761088b610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ca836108fa565b90506000670de0b6b3a764000085836108e39190610e5d565b6108ed9190610ee6565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190610fa4565b5050509150506402540be40081610992919061101f565b915050919050565b828054828255906000526020600020908101928215610a13579160200282015b82811115610a125782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ba565b5b509050610a209190610a24565b5090565b5b80821115610a3d576000816000905550600101610a25565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7182610a46565b9050919050565b610a8181610a66565b8114610a8c57600080fd5b50565b600081359050610a9e81610a78565b92915050565b600060208284031215610aba57610ab9610a41565b5b6000610ac884828501610a8f565b91505092915050565b6000819050919050565b610ae481610ad1565b82525050565b6000602082019050610aff6000830184610adb565b92915050565b610b0e81610a66565b82525050565b6000602082019050610b296000830184610b05565b92915050565b6000819050919050565b6000610b54610b4f610b4a84610a46565b610b2f565b610a46565b9050919050565b6000610b6682610b39565b9050919050565b6000610b7882610b5b565b9050919050565b610b8881610b6d565b82525050565b6000602082019050610ba36000830184610b7f565b92915050565b610bb281610ad1565b8114610bbd57600080fd5b50565b600081359050610bcf81610ba9565b92915050565b600060208284031215610beb57610bea610a41565b5b6000610bf984828501610bc0565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c49601b83610c02565b9150610c5482610c13565b602082019050919050565b60006020820190508181036000830152610c7881610c3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cb982610ad1565b9150610cc483610ad1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cf957610cf8610c7f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d3e82610ad1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7157610d70610c7f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dc6600083610dab565b9150610dd182610db6565b600082019050919050565b6000610de782610db9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e27600b83610c02565b9150610e3282610df1565b602082019050919050565b60006020820190508181036000830152610e5681610e1a565b9050919050565b6000610e6882610ad1565b9150610e7383610ad1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eac57610eab610c7f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ef182610ad1565b9150610efc83610ad1565b925082610f0c57610f0b610eb7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f3681610f17565b8114610f4157600080fd5b50565b600081519050610f5381610f2d565b92915050565b6000819050919050565b610f6c81610f59565b8114610f7757600080fd5b50565b600081519050610f8981610f63565b92915050565b600081519050610f9e81610ba9565b92915050565b600080600080600060a08688031215610fc057610fbf610a41565b5b6000610fce88828901610f44565b9550506020610fdf88828901610f7a565b9450506040610ff088828901610f8f565b935050606061100188828901610f8f565b925050608061101288828901610f44565b9150509295509295909350565b600061102a82610f59565b915061103583610f59565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561107457611073610c7f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110b1576110b0610c7f565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110ee576110ed610c7f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561112b5761112a610c7f565b5b82820290509291505056fea26469706673582212204c39b532ba428a73d1ada9bb86209d49a94ae4e3d7faf3daca0acf594f2678b364736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aa4565b6102eb565b6040516100cc9190610aea565b60405180910390f35b6100dd610333565b005b3480156100eb57600080fd5b506100f4610573565b6040516101019190610aea565b60405180910390f35b34801561011657600080fd5b5061011f610580565b60405161012c9190610b14565b60405180910390f35b34801561014157600080fd5b5061014a6105a8565b6040516101579190610b8e565b60405180910390f35b6101686101b1565b005b6101726105d2565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bd5565b610876565b6040516101a89190610b14565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108be90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c5f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027f9190610cae565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610463576000600182815481106103de576103dd610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045b90610d33565b9150506103bb565b50600067ffffffffffffffff81111561047f5761047e610d7c565b5b6040519080825280602002602001820160405280156104ad5781602001602082028036833780820191505090505b50600190805190602001906104c392919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ea90610ddc565b60006040518083038185875af1925050503d8060008114610527576040519150601f19603f3d011682016040523d82523d6000602084013e61052c565b606091505b5050905080610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790610e3d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610657576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106db57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610691575b5050505050905060005b815181101561076557600082828151811061070357610702610d04565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075d90610d33565b9150506106e5565b50600067ffffffffffffffff81111561078157610780610d7c565b5b6040519080825280602002602001820160405280156107af5781602001602082028036833780820191505090505b50600190805190602001906107c592919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ec90610ddc565b60006040518083038185875af1925050503d8060008114610829576040519150601f19603f3d011682016040523d82523d6000602084013e61082e565b606091505b5050905080610872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086990610e3d565b60405180910390fd5b5050565b60006001828154811061088c5761088b610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ca836108fa565b90506000670de0b6b3a764000085836108e39190610e5d565b6108ed9190610ee6565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190610fa4565b5050509150506402540be40081610992919061101f565b915050919050565b828054828255906000526020600020908101928215610a13579160200282015b82811115610a125782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ba565b5b509050610a209190610a24565b5090565b5b80821115610a3d576000816000905550600101610a25565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7182610a46565b9050919050565b610a8181610a66565b8114610a8c57600080fd5b50565b600081359050610a9e81610a78565b92915050565b600060208284031215610aba57610ab9610a41565b5b6000610ac884828501610a8f565b91505092915050565b6000819050919050565b610ae481610ad1565b82525050565b6000602082019050610aff6000830184610adb565b92915050565b610b0e81610a66565b82525050565b6000602082019050610b296000830184610b05565b92915050565b6000819050919050565b6000610b54610b4f610b4a84610a46565b610b2f565b610a46565b9050919050565b6000610b6682610b39565b9050919050565b6000610b7882610b5b565b9050919050565b610b8881610b6d565b82525050565b6000602082019050610ba36000830184610b7f565b92915050565b610bb281610ad1565b8114610bbd57600080fd5b50565b600081359050610bcf81610ba9565b92915050565b600060208284031215610beb57610bea610a41565b5b6000610bf984828501610bc0565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c49601b83610c02565b9150610c5482610c13565b602082019050919050565b60006020820190508181036000830152610c7881610c3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cb982610ad1565b9150610cc483610ad1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cf957610cf8610c7f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d3e82610ad1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7157610d70610c7f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dc6600083610dab565b9150610dd182610db6565b600082019050919050565b6000610de782610db9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e27600b83610c02565b9150610e3282610df1565b602082019050919050565b60006020820190508181036000830152610e5681610e1a565b9050919050565b6000610e6882610ad1565b9150610e7383610ad1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eac57610eab610c7f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ef182610ad1565b9150610efc83610ad1565b925082610f0c57610f0b610eb7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f3681610f17565b8114610f4157600080fd5b50565b600081519050610f5381610f2d565b92915050565b6000819050919050565b610f6c81610f59565b8114610f7757600080fd5b50565b600081519050610f8981610f63565b92915050565b600081519050610f9e81610ba9565b92915050565b600080600080600060a08688031215610fc057610fbf610a41565b5b6000610fce88828901610f44565b9550506020610fdf88828901610f7a565b9450506040610ff088828901610f8f565b935050606061100188828901610f8f565b925050608061101288828901610f44565b9150509295509295909350565b600061102a82610f59565b915061103583610f59565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561107457611073610c7f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110b1576110b0610c7f565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110ee576110ed610c7f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561112b5761112a610c7f565b5b82820290509291505056fea26469706673582212204c39b532ba428a73d1ada9bb86209d49a94ae4e3d7faf3daca0acf594f2678b364736f6c63430008080033",
    "devdoc": {
        "author": "Richard Jeremy Githuba",
        "details": "This implements the price feeds as our library ",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements the price feeds as our library "
            }
        },
        "title": "A contract for crowdfunding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds this contract"
            }
        },
        "notice": "This contract demos a crowd funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 59,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
